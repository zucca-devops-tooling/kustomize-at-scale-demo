@Library('kyverno-parallel-apply') _

def cliVersion = "1.0.1"
def cliFile = "kustomtrace-cli-${cliVersion}-all.jar"
def cliUrl = "https://github.com/zucca-devops-tooling/kustom-trace/releases/download/v${cliVersion}/${cliFile}"
def appListFile = "apps.yaml"
def builtAppsFolder = "kustomize-output"
def policiesFile = "policies.yaml"
def kyvernoResults = "results.yaml"

pipeline {
    agent any

    environment {
        GRADLE_OPTS = '-Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Download kustom-trace-cli') {
            steps {
                script {
                    sh "curl -LO ${cliUrl}"
                }
            }
        }
        stage('Get Apps to Build') {
            steps {
                script {
                    if (env.CHANGE_ID) {
                        echo "Pull Request detected. Calculating affected applications..."

                        // Define the name for the file that will hold the list of changed files.
                        def targetBranch = env.CHANGE_TARGET ?: 'main'

                        // Fetch
                        sh "git fetch origin ${targetBranch}"

                        echo "Comparing against target branch: ${targetBranch}"
                        def diffOutput = sh(script: "git diff --name-status FETCH_HEAD...HEAD", returnStdout: true).trim()

                        def changedFiles = diffOutput.readLines().collect { line ->
                            // Split the line by the tab character and take the second element (the path).
                            return line.split('\t')[1]
                        }

                        def changedFilesArg = changedFiles.join(' ')
                        echo "Found the following changed files: ${changedFilesArg}"

                        sh "java -jar ${cliFile} -a ./kubernetes -o ${appListFile} affected-apps ${changedFilesArg}"

                        def affectedAppsMap = readYaml(file: appListFile).'affected-apps'
                        def allAffectedApps = affectedAppsMap.values().flatten()
                        def uniqueAffectedApps = allAffectedApps.unique()
                        echo "Found ${uniqueAffectedApps.size()} unique affected applications."
    
                        def finalAppList = [ 'root-apps': uniqueAffectedApps ]
                        writeYaml(file: appListFile, data: finalAppList, overwrite: true)
                        
                        sh "cat ${appListFile}"
                    } else {
                        echo "Main branch build detected. Getting all root applications..."

                        sh "java -jar ${cliFile} -a ./kubernetes -o ${appListFile} list-root-apps"

                        echo "Full application list generated."
                    }
                }
            }
        }
        stage('Build apps') {
            steps {
                script {
                    def apps = readYaml file: appListFile
                    sh "mkdir ${builtAppsFolder}"

                    if (apps && apps.'root-apps') {
                        apps.'root-apps'.each { appPath ->
                            def outputFile = builtAppsFolder + "/" + appPath.replaceAll("/", "_") + ".yaml"
                            echo "--- Executing build for: ${appPath} ---"
                            def buildResult = sh(
                                script: "kustomize build kubernetes/${appPath} -o ${outputFile}",
                                returnStatus: true
                            )

                            if (buildResult != 0) {
                                echo "❌ Failed to build ${appPath}, skipping..."
                            }
                        }
                    }
                }
            }
        }
        stage('Build kyverno policies') {
            steps {
                script {
                    sh "kustomize build ./policies -o ${policiesFile}"
                }
            }
        }
        stage('Add extra autogenerated resources') {
            when {
                branch 'main'
            }
            steps {
                script {
                    sh "chmod +x generate-expensive-apps.sh"
                    sh "./generate-expensive-apps.sh"
                }
            }
        }

        stage('Apply kyverno policies') {
            steps {
                script {
                    try {
                        sh "kyverno apply ${policiesFile} --resource ${builtAppsFolder} --audit-warn --policy-report --output generated > ${kyvernoResults}"
                    } catch (e) {
                        println "Kyverno policies failed"
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists(kyvernoResults)) {
                            archiveArtifacts artifacts: "${kyvernoResults}"
                        }
                        sh "ls generated"
                    }
                }
            }
        }
        stage('Parallel Apply') {
            when {
                branch 'main'
            }
            steps {
                script {
                    try {
                        kyvernoParallelApply([
                            'generatedResourcesDir': 'generated',
                            'manifestSourceDirectory': builtAppsFolder,
                            'finalReportPath': kyvernoResults,
                            'policyPath': policiesFile,
                            'extraKyvernoArgs': '--audit-warn',
                            'debugLogDir': 'logs'
                        ])
                    } catch (err) {
                        println("Apply failed")
                        println(err)
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
