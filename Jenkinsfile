@Library('kyverno-parallel-apply') _

def cliVersion = "1.0.1"
def cliFile = "kustomtrace-cli-${cliVersion}-all.jar"
def cliUrl = "https://github.com/zucca-devops-tooling/kustom-trace/releases/download/v${cliVersion}/${cliFile}"
def appListFile = "apps.yaml"
def builtAppsFolder = "kustomize-output"
def policiesFile = "policies.yaml"
def kyvernoResults = "results.yaml"

pipeline {
    agent any

    environment {
        GRADLE_OPTS = '-Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Download kustom-trace-cli') {
            steps {
                script {
                    sh "curl -LO ${cliUrl}"
                }
            }
        }
        stage('Get Apps to Build') {
            steps {
                script {
                    if (env.CHANGE_ID) {
                        echo "Pull Request detected. Calculating affected applications..."

                        // Define the name for the file that will hold the list of changed files.
                        def changedFilesList = 'changed-files-in-pr.txt'
                        def targetBranch = env.CHANGE_TARGET ?: 'main'

                        echo "Comparing against target branch: ${targetBranch}"

                        // This command compares the current branch with the target branch
                        // and saves only the names of the changed files to our text file.
                        sh "git diff --name-only origin/${targetBranch}... > ${changedFilesList}"

                        echo "Found the following changed files:"
                        sh "cat ${changedFilesList}"

                        // This command uses the list of changed files to find only the root
                        // applications that were actually impacted by the PR's changes.
                        sh "java -jar ${cliFile} -a ./kubernetes -o ${appListFile} affected-apps -f ${changedFilesList}"

                        echo "Affected apps list generated for PR."
                    } else {
                        echo "Main branch build detected. Getting all root applications..."

                        sh "java -jar ${cliFile} -a ./kubernetes -o ${appListFile} list-root-apps"

                        echo "Full application list generated."
                    }
                }
            }
        }
        stage('Build apps') {
            steps {
                script {
                    def apps = readYaml file: appListFile
                    sh "mkdir ${builtAppsFolder}"

                    if (apps && apps.'root-apps') {
                        apps.'root-apps'.each { appPath ->
                            def outputFile = builtAppsFolder + "/" + appPath.replaceAll("/", "_") + ".yaml"
                            echo "--- Executing build for: ${appPath} ---"
                            def buildResult = sh(
                                script: "kustomize build kubernetes/${appPath} -o ${outputFile}",
                                returnStatus: true
                            )

                            if (buildResult != 0) {
                                echo "❌ Failed to build ${appPath}, skipping..."
                            }
                        }
                    }
                }
            }
        }
        stage('Build kyverno policies') {
            steps {
                script {
                    sh "kustomize build ./policies -o ${policiesFile}"
                }
            }
        }
        stage('Add extra autogenerated resources') {
            when {
                expression {
                    branch 'main'
                }
            }
            steps {
                script {
                    sh "chmod +x generate-expensive-apps.sh"
                    sh "./generate-expensive-apps.sh"
                }
            }
        }

        stage('Apply kyverno policies') {
            steps {
                script {
                    try {
                        sh "kyverno apply ${policiesFile} --resource ${builtAppsFolder} --audit-warn --policy-report --output generated > ${kyvernoResults}"
                    } catch (e) {
                        println "Kyverno policies failed"
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists(kyvernoResults)) {
                            archiveArtifacts artifacts: "${kyvernoResults}"
                        }
                        sh "ls generated"
                    }
                }
            }
        }
        stage('Parallel Apply') {
            when {
                expression {
                    branch 'main'
                }
            }
            steps {
                script {
                    try {
                        kyvernoParallelApply([
                            'generatedResourcesDir': 'generated',
                            'manifestSourceDirectory': builtAppsFolder,
                            'finalReportPath': kyvernoResults,
                            'policyPath': policiesFile,
                            'extraKyvernoArgs': '--audit-warn',
                            'debugLogDir': 'logs'
                        ])
                    } catch (err) {
                        println("Apply failed")
                        println(err)
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}
